{"version":3,"sources":["components/SearchBar.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","robot.js","app/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","type","placeholder","onChange","searchChange","Card","id","name","email","console","log","alt","src","CardList","cardArray","robots","map","robot","key","Scroll","style","overflowY","height","children","ErrorBoundary","state","error","info","this","setState","React","Component","username","App","onSearchChange","event","searchQuery","target","value","searchTerm","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oOAeeA,G,MAbG,SAACC,GACf,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,eACZC,SAAUJ,EAAMK,kBCKjBC,EAZF,SAACN,GAAW,IACdO,EAAmBP,EAAnBO,GAAIC,EAAeR,EAAfQ,KAAMC,EAAST,EAATS,MAEjB,OADAC,QAAQC,IAAIX,GAER,yBAAKC,UAAU,uDACX,yBAAKW,IAAI,SAASC,IAAG,+BAA0BN,EAA1B,mBACrB,2BAAIC,GACJ,2BAAIC,KCKDK,EAXE,SAACd,GACd,IAAMe,EAAYf,EAAMgB,OAAOC,KAAI,SAACC,GAChC,OAAO,kBAAC,EAAD,eAAMC,IAAKD,EAAMX,IAAQW,OAEpC,OACI,6BACKH,ICCEK,EARA,SAACpB,GACZ,OACI,yBAAKqB,MAAO,CAACC,UAAU,SAASC,OAAO,UAClCvB,EAAMwB,WCyBJC,E,kDA3BX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAQ,CACTC,OAAO,GAHG,E,8DAOAA,EAAOC,GACrBC,KAAKC,SAAS,CACVH,OAAO,M,+BAKX,OAAIE,KAAKH,MAAMC,MAEX,6BACI,2DACA,sEAIGE,KAAK7B,MAAMwB,a,GAvBFO,IAAMC,WCFrBhB,EAAS,CAClB,CACET,GAAI,EACJC,KAAM,gBACNyB,SAAU,OACVxB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNyB,SAAU,YACVxB,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNyB,SAAU,WACVxB,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNyB,SAAU,WACVxB,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNyB,SAAU,SACVxB,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNyB,SAAU,mBACVxB,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNyB,SAAU,eACVxB,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNyB,SAAU,gBACVxB,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNyB,SAAU,WACVxB,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNyB,SAAU,iBACVxB,MAAO,2BCfEyB,E,kDAnCb,WAAYlC,GAAO,IAAD,8BAChB,cAAMA,IAQRmC,eAAiB,SAACC,GAChB,IAAMC,EAAcD,EAAME,OAAOC,MACjC,EAAKT,SAAS,CACZU,WAAYH,KAVd,EAAKX,MAAQ,CACXV,OAAQA,EACRwB,WAAY,IAJE,E,qDAgBT,IAAD,OACAC,EAAiBZ,KAAKH,MAAMV,OAAO0B,QAAO,SAAAxB,GAC9C,OAAOA,EAAMV,KAAKmC,cAAcC,SAAS,EAAKlB,MAAMc,eAEtD,OACE,yBAAKvC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWI,aAAcwB,KAAKM,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQyB,W,GA3BZV,IAAMC,W,MCIJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLjB,QAAQiB,MAAMA,EAAMmC,a","file":"static/js/main.33d89a37.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBar = (props) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue' \n                type='search' \n                placeholder='search robot' \n                onChange={props.searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBar;","import React from 'react';\n\nconst Card = (props) => {\n    const {id, name, email} = props\n    console.log(props)\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n            <p>{name}</p>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js'\n\nconst CardList = (props) => {\n    const cardArray = props.robots.map((robot) => {\n        return <Card key={robot.id} {...robot} />\n    })\n    return (\n        <div>\n            {cardArray}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY:'scroll',height:'500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            error: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({\n            error: true\n        })\n    }\n\n    render(){\n        if (this.state.error){\n            return (\n            <div>\n                <h1>Oops! Something went wrong.</h1>\n                <p>Please refresh the page and try again.</p>\n            </div>\n        )\n        } else {\n            return this.props.children\n        }\n    }\n}\n\nexport default ErrorBoundary;","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];","import React from 'react';\nimport './App.css';\nimport SearchBar from '../components/SearchBar';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { robots } from '../robot';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      robots: robots,\n      searchTerm: ''\n    }\n  }\n\n\n  onSearchChange = (event) => {\n    const searchQuery = event.target.value\n    this.setState({\n      searchTerm: searchQuery\n    })\n  }\n\n  render(){\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchTerm)\n    })\n    return (\n      <div className='tc'>\n        <h1>RoboFriends</h1>\n        <SearchBar searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}